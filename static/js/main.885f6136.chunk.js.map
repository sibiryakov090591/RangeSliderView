{"version":3,"sources":["PriceRange/PriceRange.module.css","PriceRange/Input/Input.tsx","PriceRange/Slider/SliderStyles.tsx","PriceRange/Slider/Slider.tsx","PriceRange/PriceRange.tsx","App.tsx","reportWebVitals.ts","index.tsx","PriceRange/Input/Input.module.css"],"names":["module","exports","InputComponent","minValue","maxValue","from","to","onChangeFromValue","onChangeToValue","useState","fromValue","setFromValue","toValue","setToValue","useEffect","setFromHandler","setToHandler","className","styles","wrapper","inputWrapper","input","value","onChange","e","currentTarget","replace","onBlur","onKeyPress","code","borderText","useStyles","makeStyles","root","boxShadow","track","background","opacity","height","rail","thumb","top","border","borderRadius","width","focusVisible","SliderComponent","onChangeRange","classes","Slider","aria-labelledby","min","max","event","newValue","PriceRange","title","onChangeValues","Input","values","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.885f6136.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PriceRange_wrapper__2RunE\",\"title\":\"PriceRange_title__1qHgQ\"};","import React, {ChangeEvent, KeyboardEvent, useEffect, useState} from 'react';\r\nimport styles from \"./Input.module.css\";\r\n\r\ntype PropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    from: number\r\n    to: number\r\n    onChangeFromValue: (min: number) => void\r\n    onChangeToValue: (max: number) => void\r\n}\r\n\r\nconst InputComponent: React.FC<PropsType> = ({\r\n                                                 minValue,\r\n                                                 maxValue,\r\n                                                 from,\r\n                                                 to,\r\n                                                 onChangeFromValue,\r\n                                                 onChangeToValue\r\n                                             }) => {\r\n    // Hooks\r\n    const [fromValue, setFromValue] = useState(from);\r\n    const [toValue, setToValue] = useState(to);\r\n    useEffect(() => {\r\n        setFromValue(from)\r\n        setToValue(to)\r\n    }, [from, to])\r\n\r\n\r\n    // Handlers\r\n    const setFromHandler = () => {\r\n        if (fromValue <= minValue) {\r\n            onChangeFromValue(minValue)\r\n            setFromValue(minValue)\r\n        } else if (fromValue >= maxValue) {\r\n            onChangeFromValue(maxValue)\r\n            setFromValue(maxValue)\r\n        } else {\r\n            onChangeFromValue(fromValue)\r\n        }\r\n    }\r\n    const setToHandler = () => {\r\n        if (toValue >= maxValue) {\r\n            onChangeToValue(maxValue)\r\n            setToValue(maxValue)\r\n        } else if (toValue <= minValue) {\r\n            onChangeToValue(minValue)\r\n            setToValue(minValue)\r\n        } else {\r\n            onChangeToValue(toValue)\r\n        }\r\n    }\r\n    const onChangeFromValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // Only numbers input\r\n        const value = +e.currentTarget.value.replace(/\\D/g, '')\r\n        setFromValue(value)\r\n    }\r\n    const onChangeToValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // Only numbers input\r\n        const value = +e.currentTarget.value.replace(/\\D/g, '')\r\n        setToValue(value)\r\n    }\r\n    const onKeyPressFromHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.code === \"Enter\") {\r\n            setFromHandler()\r\n        }\r\n    }\r\n    const onKeyPressToHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.code === \"Enter\") {\r\n            setToHandler()\r\n        }\r\n    }\r\n\r\n\r\n    // Render\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.inputWrapper}>\r\n                <input className={styles.input}\r\n                       value={fromValue}\r\n                       onChange={onChangeFromValueHandler}\r\n                       onBlur={setFromHandler}\r\n                       onKeyPress={onKeyPressFromHandler}\r\n                />\r\n                <div className={styles.borderText}>\r\n                    От\r\n                </div>\r\n            </div>\r\n            <div className={styles.inputWrapper}>\r\n                <input className={styles.input}\r\n                       value={toValue}\r\n                       onChange={onChangeToValueHandler}\r\n                       onBlur={setToHandler}\r\n                       onKeyPress={onKeyPressToHandler}\r\n                />\r\n                <div className={styles.borderText}>\r\n                    До\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InputComponent;\r\n","import {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        boxShadow: \"none\"\r\n    },\r\n    track: {\r\n        background: \"#2051A3\",\r\n        opacity: 0.6,\r\n        height: \"3px\",\r\n    },\r\n    rail: {\r\n        height: \"3px\",\r\n    },\r\n    thumb: {\r\n        top: \"37%\",\r\n        background: \"#2051A3\",\r\n        border: \"3px solid #D6D7E4\",\r\n        borderRadius: \"10px\",\r\n        width: \"20px\",\r\n        height: \"20px\",\r\n        '&:hover': {\r\n            boxShadow: \"none\",\r\n        },\r\n        '&:active': {\r\n            boxShadow: \"none\",\r\n        },\r\n        '&:focus': {\r\n            boxShadow: \"none\",\r\n        }\r\n    },\r\n    focusVisible: {\r\n        boxShadow: \"none\"\r\n    }\r\n});\r\n\r\nexport default useStyles;\r\n","import React from 'react';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport useStyles from './SliderStyles';\r\nimport {ChangeEvent} from 'react';\r\n\r\ntype PropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    from: number\r\n    to: number\r\n    onChangeRange: (values: number[]) => void\r\n}\r\n\r\nconst SliderComponent: React.FC<PropsType> = ({\r\n                                                  minValue,\r\n                                                  maxValue,\r\n                                                  onChangeRange,\r\n                                                  from,\r\n                                                  to\r\n                                              }) => {\r\n    // Styles\r\n    const classes = useStyles();\r\n\r\n\r\n    // Handlers\r\n    const handleChange = (event: ChangeEvent<{}>, newValue: number | number[]) => {\r\n        onChangeRange(newValue as number[]);\r\n    }\r\n\r\n\r\n    // Render\r\n    return (\r\n        <Slider aria-labelledby=\"range-slider\"\r\n                value={[from, to]}\r\n                min={minValue}\r\n                max={maxValue}\r\n                onChange={handleChange}\r\n                classes={{\r\n                    root: classes.root,\r\n                    track: classes.track,\r\n                    rail: classes.rail,\r\n                    thumb: classes.thumb,\r\n                    focusVisible: classes.focusVisible\r\n                }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default SliderComponent;\r\n","import React, {useState} from 'react';\r\nimport InputComponent from './Input/Input';\r\nimport SliderComponent from './Slider/Slider';\r\nimport styles from './PriceRange.module.css';\r\n\r\ntype PropsType = {\r\n    title: string\r\n    min: number\r\n    max: number\r\n    from: number\r\n    to: number\r\n    onChangeValues: (from: number, to: number) => void\r\n}\r\n\r\nconst PriceRange: React.FC<PropsType> = ({\r\n                                             title,\r\n                                             min,\r\n                                             max,\r\n                                             from,\r\n                                             to,\r\n                                             onChangeValues\r\n                                         }) => {\r\n\r\n    // State\r\n    const [fromValue, setFromValue] = useState(from);\r\n    const [toValue, setToValue] = useState(to);\r\n\r\n\r\n    // Handlers\r\n    const inputFromHandler = (min: number) => {\r\n        setFromValue(min);\r\n        onChangeValues(fromValue, toValue);\r\n    }\r\n    const inputToHandler = (max: number) => {\r\n        setToValue(max);\r\n        onChangeValues(fromValue, toValue);\r\n    }\r\n    const sliderHandler = (values: number[]) => {\r\n        setFromValue(values[0]);\r\n        setToValue(values[1]);\r\n    }\r\n\r\n\r\n    // Render\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.title}>\r\n                {title}\r\n            </div>\r\n            <InputComponent minValue={min}\r\n                            maxValue={max}\r\n                            from={fromValue}\r\n                            to={toValue}\r\n                            onChangeFromValue={inputFromHandler}\r\n                            onChangeToValue={inputToHandler}\r\n            />\r\n            <SliderComponent minValue={min}\r\n                             maxValue={max}\r\n                             from={fromValue}\r\n                             to={toValue}\r\n                             onChangeRange={sliderHandler}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PriceRange;\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport PriceRange from \"./PriceRange/PriceRange\";\n\nfunction App() {\n\n    // Constants\n    const START_FROM_VALUE = 99;\n    const START_TO_VALUE = 10690;\n\n\n    // State\n    const [fromValue, setFromValue] = useState(START_FROM_VALUE);\n    const [toValue, setToValue] = useState(START_TO_VALUE);\n\n\n    // Handlers\n    const priceRangeHandler = (from: number, to: number) => {\n        setFromValue(from);\n        setToValue(to);\n    }\n\n\n    // Render\n    return (\n        <div className=\"App\">\n            <PriceRange title={`Цена, ₽`}\n                        min={START_FROM_VALUE}\n                        max={START_TO_VALUE}\n                        from={fromValue}\n                        to={toValue}\n                        onChangeValues={priceRangeHandler}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Input_wrapper__1P3Cr\",\"inputWrapper\":\"Input_inputWrapper__HKaMo\",\"input\":\"Input_input__2N15c\",\"borderText\":\"Input_borderText__iHmsi\"};"],"sourceRoot":""}